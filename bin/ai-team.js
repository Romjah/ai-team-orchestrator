#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import inquirer from 'inquirer';
import Together from 'together-ai';
import { APIKeyManager } from '../lib/api-config.js';
import PromptTemplateManager from '../lib/prompt-templates.js';
import fs from 'fs';
import EnhancedTemplatesHelper from '../lib/enhanced-templates.js';

// Charger le fichier .env automatiquement si disponible
function loadEnvFile() {
  if (fs.existsSync('.env')) {
    try {
      const envContent = fs.readFileSync('.env', 'utf8');
      const lines = envContent.split('\n');
      
      for (const line of lines) {
        const trimmed = line.trim();
        if (trimmed && !trimmed.startsWith('#') && trimmed.includes('=')) {
          const [key, ...valueParts] = trimmed.split('=');
          const value = valueParts.join('=');
          if (key && value && !process.env[key.trim()]) {
            process.env[key.trim()] = value.trim();
          }
        }
      }
      // Message silencieux par d√©faut, sauf si --verbose
      if (process.argv.includes('--verbose') || process.argv.includes('-v')) {
        console.log(chalk.green('‚úÖ Fichier .env charg√©'));
      }
    } catch (error) {
      if (process.argv.includes('--verbose') || process.argv.includes('-v')) {
        console.log(chalk.yellow('‚ö†Ô∏è Erreur lors du chargement de .env:', error.message));
      }
    }
  }
}

// Charger les variables d'environnement au d√©marrage
loadEnvFile();

class AITeamCLI {
  constructor() {
    this.program = new Command();
    this.setupProgram();
    this.setupCommands();
  }

  setupProgram() {
    this.program
      .name('ai-team')
      .description('üöÄ AI Team Orchestrator - Cr√©ation automatique d\'issues avec DeepSeek R1')
      .version('2.4.2')
      .option('-v, --verbose', 'Mode verbose')
      .option('--quick', 'Mode ultra-rapide (par d√©faut)');
  }

  setupCommands() {
    this.setupIssueCommand();
    this.setupCreateCommand();
    this.setupSetupCommand();
    this.setupInitCommand();
    this.setupCheckCommand();
    this.setupSyncSecretsCommand();
  }

  setupIssueCommand() {
    this.program
      .command('issue <title> [description]')
      .description('üî• Cr√©ation automatique d\'issue GitHub avec DeepSeek R1')
      .option('-t, --type <type>', 'Type d\'agent', 'feature')
      .option('--labels <labels>', 'Labels s√©par√©s par des virgules', 'ai-team,enhancement')
      .action(async (title, description, options) => {
        try {
          await this.handleAutoIssue(title, description, options);
        } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
          process.exit(1);
        }
      });
  }

  setupCreateCommand() {
    this.program
      .command('create [description]')
      .description('üöÄ Cr√©ation rapide de t√¢che')
      .option('-t, --type <type>', 'Type d\'agent', 'feature')
      .option('--auto-issue', 'Cr√©er automatiquement une issue GitHub')
      .action(async (description, options) => {
        try {
          await this.handleQuickCreate(description, options);
    } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
        process.exit(1);
      }
      });
  }

  setupSetupCommand() {
    this.program
      .command('setup-api')
      .description('üîë Configuration Together.ai pour DeepSeek R1')
      .option('--env-file', 'Cr√©er un fichier .env local (recommand√©)')
      .action(async (options) => {
        try {
          const apiManager = new APIKeyManager();
          await apiManager.setupAPIKeyInteractively(options);
        } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
          process.exit(1);
        }
      });
  }

  setupInitCommand() {
    this.program
      .command('init')
      .description('üöÄ Initialisation du projet avec les workflows GitHub et scripts')
      .action(async () => {
        try {
          await this.handleInit();
        } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
          process.exit(1);
        }
      });
  }

  setupCheckCommand() {
    this.program
      .command('check')
      .description('üîç V√©rification des pr√©requis pour le workflow')
      .action(async () => {
        try {
          await this.handleCheck();
        } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
          process.exit(1);
        }
      });
  }

  setupSyncSecretsCommand() {
    this.program
      .command('sync-secrets')
      .description('üîÑ Synchronisation des secrets GitHub √† partir du fichier .env local')
      .action(async () => {
        try {
          await this.handleSyncSecrets();
        } catch (error) {
          console.log(chalk.red(`‚ùå Erreur: ${error.message}`));
          process.exit(1);
        }
      });
  }

  async handleAutoIssue(title, description, options) {
    console.log(chalk.cyan('üî• Cr√©ation automatique d\'issue avec DeepSeek R1'));
    
    const apiKey = await this.ensureQuickSetup();
    
    // G√©n√©ration automatique de description si manquante
    if (!description) {
      console.log(chalk.yellow('ü§ñ G√©n√©ration automatique avec DeepSeek R1...'));
      description = await this.generateDescriptionWithDeepSeek(title, options.type, apiKey);
    }

    await this.createGitHubIssue(title, description, options.type, apiKey, options.labels);
  }

  async handleQuickCreate(description, options) {
    console.log(chalk.cyan('ü§ñ AI Team Orchestrator v2.0 - Mode Ultra-Rapide avec DeepSeek R1'));
    
    const apiKey = await this.ensureQuickSetup();
    
    if (!description) {
    const answer = await inquirer.prompt([
      {
          type: 'input',
          name: 'description',
          message: 'üìù D√©crivez votre t√¢che:',
          validate: input => input.trim().length > 0 || 'Veuillez entrer une description'
        }
      ]);
      description = answer.description;
    }

    const agentTypes = {
      'frontend': 'üé® Frontend',
      'backend': '‚öôÔ∏è Backend', 
      'testing': 'üß™ Testing',
      'bug_fix': 'üêõ Bug Fix',
      'refactor': 'üèóÔ∏è Refactor',
      'feature': 'üöÄ Feature'
    };

    console.log(chalk.green(`‚úÖ Agent: ${agentTypes[options.type] || agentTypes.feature}`));
    console.log(chalk.green(`‚úÖ T√¢che: ${description}`));

    if (options.autoIssue) {
      await this.createGitHubIssue(description, description, options.type, apiKey);
      } else {
      console.log(chalk.cyan('\nüéØ Pr√™t ! Utilisez --auto-issue pour cr√©er l\'issue GitHub'));
    }
  }

  async ensureQuickSetup() {
    const apiManager = new APIKeyManager();
    
    if (apiManager.isAPIKeyConfigured()) {
      return apiManager.getAPIKey();
    }

    console.log(chalk.yellow('‚öôÔ∏è Configuration rapide n√©cessaire...'));
    
    const { apiKey } = await inquirer.prompt([
      {
        type: 'password',
        name: 'apiKey',
        message: 'üîë Cl√© API Together.ai (obtenez-la sur together.ai):',
        mask: '*',
        validate: input => input.trim().length > 10 || 'Cl√© API invalide'
      }
    ]);

    apiManager.saveAPIKey(apiKey);
    console.log(chalk.green('‚úÖ Configuration sauvegard√©e !'));
    
    return apiKey;
  }

  async generateDescriptionWithDeepSeek(title, type, apiKey) {
    // Utilisation du nouveau syst√®me de templates performants
    console.log(chalk.cyan('üß† G√©n√©ration avec templates performants DeepSeek R1...'));
    
    // Analyser le contexte du projet si possible
    const additionalContext = await EnhancedTemplatesHelper.gatherProjectContext();
    
    // G√©n√©rer le prompt optimis√© selon le type de t√¢che
    const promptManager = new PromptTemplateManager();
    const optimizedPrompt = promptManager.generatePrompt(title, type, additionalContext);
    
    console.log(chalk.gray('üìã Template utilis√©:'), chalk.yellow(type));
    if (additionalContext.complexity) {
      console.log(chalk.gray('üéØ Complexit√© d√©tect√©e:'), chalk.blue(additionalContext.complexity));
    }
    if (additionalContext.technologies && additionalContext.technologies.length > 0) {
      console.log(chalk.gray('üîß Technologies d√©tect√©es:'), 
        chalk.green(additionalContext.technologies.map(t => t.techs.join(', ')).join(', ')));
    }

    try {
      const client = new Together({ apiKey });
      
      const response = await client.chat.completions.create({
        model: "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free",
        messages: [
          {
            role: "system",
            content: "Tu es un expert d√©veloppeur senior avec une expertise en architecture logicielle, DevOps et bonnes pratiques. G√©n√®re des sp√©cifications techniques d√©taill√©es, pr√©cises et imm√©diatement exploitables. Utilise un style professionnel avec des sections claires et des crit√®res d'acceptation mesurables."
          },
          {
            role: "user",
            content: optimizedPrompt
          }
        ],
        max_tokens: 1200,
        temperature: 0.7
      });

      const generatedContent = response.choices[0].message.content;
      
      // Ajouter des m√©tadonn√©es sur le template utilis√©
      const enhancedDescription = `${generatedContent}

---
## ü§ñ M√©tadonn√©es AI Team
- **Template utilis√©:** ${type}
- **Complexit√© d√©tect√©e:** ${additionalContext.complexity || 'medium'}
- **Mod√®le IA:** DeepSeek R1 (DeepSeek-R1-Distill-Llama-70B-free)
- **Version AI Team:** v2.5.0 avec templates performants

*G√©n√©r√© par AI Team Orchestrator avec syst√®me de templates avanc√©s*`;

      return enhancedDescription;
      
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è G√©n√©ration DeepSeek √©chou√©e, utilisation d\'un template enrichi par d√©faut'));
      return EnhancedTemplatesHelper.getEnhancedDefaultDescription(title, type, additionalContext);
    }
  }

  /**
   * Collecte le contexte du projet pour enrichir les prompts
   */
  async gatherProjectContext() {
    const context = {};
    
    try {
      // Analyser package.json s'il existe
      if (fs.existsSync('package.json')) {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        context.projectName = packageJson.name;
        context.dependencies = Object.keys(packageJson.dependencies || {});
        context.devDependencies = Object.keys(packageJson.devDependencies || {});
        context.scripts = Object.keys(packageJson.scripts || {});
        
        // D√©tecter le type de projet
        if (context.dependencies.includes('react') || context.dependencies.includes('vue') || context.dependencies.includes('angular')) {
          context.projectType = 'frontend';
        } else if (context.dependencies.includes('express') || context.dependencies.includes('fastify') || context.dependencies.includes('koa')) {
          context.projectType = 'backend';
        }
      }

      // Analyser la structure des dossiers
      const commonDirs = ['src', 'lib', 'components', 'pages', 'api', 'services', 'utils', 'tests', '__tests__'];
      context.projectStructure = commonDirs.filter(dir => fs.existsSync(dir));

      // Analyser les fichiers de configuration
      const configFiles = ['.eslintrc', 'tsconfig.json', 'tailwind.config.js', 'next.config.js', 'vite.config.js', 'webpack.config.js'];
      context.configFiles = configFiles.filter(file => 
        fs.existsSync(file) || fs.existsSync(file + '.js') || fs.existsSync(file + '.json')
      );

      // D√©tecter TypeScript
      if (fs.existsSync('tsconfig.json') || context.dependencies?.includes('typescript')) {
        context.hasTypeScript = true;
      }

      // D√©tecter les frameworks de test
      const testFrameworks = ['jest', 'vitest', 'mocha', 'cypress', 'playwright'];
      context.testFrameworks = testFrameworks.filter(framework => 
        context.dependencies?.includes(framework) || context.devDependencies?.includes(framework)
      );

    } catch (error) {
      console.log(chalk.gray('üìù Contexte projet non d√©tect√©, utilisation des defaults'));
    }

    return context;
  }

  /**
   * Description enrichie par d√©faut quand DeepSeek R1 n'est pas disponible
   */
  getEnhancedDefaultDescription(title, type, context) {
    const techStack = this.generateTechStackSuggestions(type, context);
    const complexity = context.complexity || 'medium';
    
    return `## üéØ Objectif
${title}

## üìã Description Technique
T√¢che de d√©veloppement **${type}** avec une complexit√© estim√©e √† **${complexity}**.

${this.getTypeSpecificSection(type)}

## üîß Stack Technique Sugg√©r√©e
${techStack}

## ‚ö° Crit√®res de Performance
${this.getPerformanceCriteria(type)}

## ‚úÖ Crit√®res d'Acceptation
${this.getAcceptanceCriteria(type)}

## üß™ Tests Requis
${this.getTestingRequirements(type)}

## üìö Documentation
- Documentation technique compl√®te
- Commentaires de code explicatifs
- Guide d'utilisation si applicable
- Diagrammes d'architecture si n√©cessaire

---
## ü§ñ M√©tadonn√©es AI Team
- **Template utilis√©:** ${type} (fallback enrichi)
- **Complexit√© d√©tect√©e:** ${complexity}
- **Contexte projet:** ${context.projectType || 'd√©tection automatique'}
- **TypeScript:** ${context.hasTypeScript ? '‚úÖ D√©tect√©' : '‚ùå Non d√©tect√©'}
- **Frameworks de test:** ${context.testFrameworks?.join(', ') || '√Ä d√©finir'}

*G√©n√©r√© par AI Team Orchestrator v2.5.0 avec syst√®me de templates avanc√©s*`;
  }

  getTypeSpecificSection(type) {
    const sections = {
      frontend: `### üé® Sp√©cifications Frontend
- Interface utilisateur moderne et responsive
- Composants r√©utilisables et maintenables
- Gestion d'√©tat appropri√©e (local/global)
- Optimisations de performance (lazy loading, code splitting)
- Accessibilit√© (WCAG 2.1)`,

      backend: `### ‚öôÔ∏è Sp√©cifications Backend
- Architecture REST ou GraphQL selon le besoin
- Mod√©lisation de donn√©es robuste
- Authentification et autorisation s√©curis√©es
- Gestion d'erreurs et logging appropri√©s
- Optimisations de performance (cache, queries)`,

      testing: `### üß™ Strat√©gie de Test
- Tests unitaires avec haute couverture
- Tests d'int√©gration pour les APIs
- Tests end-to-end pour les parcours critiques
- Tests de performance et de charge
- Validation de s√©curit√©`,

      bug_fix: `### üêõ Analyse et Correction
- Investigation approfondie de la cause racine
- Reproduction du bug en environnement de test
- Correction minimale et s√ªre
- Tests de r√©gression pour √©viter la r√©currence
- Documentation de la solution`,

      refactor: `### üèóÔ∏è Refactoring Structur√©
- Analyse du code existant et identification des am√©liorations
- Refactoring incr√©mental avec validation continue
- Am√©lioration de la lisibilit√© et de la maintenabilit√©
- R√©duction de la complexit√© cyclomatique
- Pr√©servation des fonctionnalit√©s existantes`,

      feature: `### üöÄ Nouvelle Fonctionnalit√©
- Sp√©cifications fonctionnelles d√©taill√©es
- Conception technique adapt√©e √† l'architecture existante
- Impl√©mentation par √©tapes avec validation
- Tests complets de la fonctionnalit√©
- Documentation utilisateur et technique`
    };

    return sections[type] || sections.feature;
  }

  generateTechStackSuggestions(type, context) {
    const hasReact = context.dependencies?.includes('react');
    const hasVue = context.dependencies?.includes('vue');
    const hasNext = context.dependencies?.includes('next');
    const hasExpress = context.dependencies?.includes('express');
    const hasTypeScript = context.hasTypeScript;

    const suggestions = {
      frontend: `- **Framework:** ${hasReact ? 'React' : hasVue ? 'Vue.js' : hasNext ? 'Next.js' : 'React (recommand√©)'}
- **Styling:** ${context.dependencies?.includes('tailwindcss') ? 'Tailwind CSS' : 'CSS Modules / Styled Components'}
- **State Management:** ${hasReact ? 'React Query + Zustand' : 'Pinia / Vuex'}
- **Testing:** ${context.testFrameworks?.includes('jest') ? 'Jest + Testing Library' : 'Vitest + Testing Library'}
- **Build:** ${hasNext ? 'Next.js' : 'Vite / Webpack'}`,

      backend: `- **Runtime:** ${context.dependencies?.includes('express') ? 'Node.js + Express' : 'Node.js + Fastify'}
- **Base de donn√©es:** PostgreSQL + Prisma ORM
- **Authentification:** JWT + bcrypt
- **Validation:** Zod / Joi
- **Testing:** ${context.testFrameworks?.includes('jest') ? 'Jest + Supertest' : 'Vitest + Supertest'}`,

      testing: `- **Unit Testing:** ${context.testFrameworks?.includes('jest') ? 'Jest' : 'Vitest'} + Testing Library
- **E2E Testing:** ${context.testFrameworks?.includes('cypress') ? 'Cypress' : 'Playwright'}
- **Performance:** K6 / Artillery
- **Visual Testing:** Percy / Chromatic
- **Coverage:** NYC / C8`,

      bug_fix: `- **Debugging:** Chrome DevTools / Node.js Inspector
- **Logging:** Winston / Pino
- **Monitoring:** Sentry / DataDog
- **Profiling:** Clinic.js / 0x
- **Testing:** Framework existant + tests de r√©gression`,

      refactor: `- **Linting:** ESLint + Prettier
- **Type Checking:** ${hasTypeScript ? 'TypeScript strict mode' : 'TypeScript (migration recommand√©e)'}
- **Code Analysis:** SonarQube / CodeClimate
- **Testing:** Maintien de la couverture existante
- **Documentation:** JSDoc / TSDoc`
    };

    return suggestions[type] || suggestions.feature || `- Technologies adapt√©es au projet existant
- TypeScript pour la robustesse${hasTypeScript ? ' (d√©j√† configur√©)' : ''}
- Framework de test moderne
- Outils de qualit√© de code (ESLint, Prettier)`;
  }

  getPerformanceCriteria(type) {
    const criteria = {
      frontend: `- First Contentful Paint (FCP) < 1.5s
- Largest Contentful Paint (LCP) < 2.5s
- Time to Interactive (TTI) < 3.5s
- Cumulative Layout Shift (CLS) < 0.1
- Bundle size optimis√© avec code splitting`,

      backend: `- Response time API < 100ms (95th percentile)
- Throughput > 1000 req/sec
- Memory usage stable (pas de leaks)
- Database query time < 50ms
- Error rate < 0.1%`,

      testing: `- Test execution time < 5min (suite compl√®te)
- Tests unitaires < 10s
- Tests E2E < 2min par parcours
- Coverage report g√©n√©ration < 30s
- Parallel execution optimis√©e`,

      bug_fix: `- Correction sans d√©gradation performance
- Temps de r√©solution < 24h pour bugs critiques
- Impact minimal sur l'existant
- Validation en staging avant production`,

      refactor: `- Performance √©gale ou am√©lior√©e
- Temps de build inchang√© ou r√©duit
- Memory footprint maintenu
- Aucune r√©gression fonctionnelle`
    };

    return criteria[type] || criteria.feature || `- Performance adapt√©e au type de t√¢che
- Monitoring des m√©triques cl√©s
- Optimisation selon les besoins
- Validation avant d√©ploiement`;
  }

  getAcceptanceCriteria(type) {
    const criteria = {
      frontend: `- [ ] Interface responsive (mobile, tablet, desktop)
- [ ] Accessibilit√© WCAG 2.1 AA valid√©e
- [ ] Cross-browser compatibility (Chrome, Firefox, Safari, Edge)
- [ ] Performance Web Vitals dans les seuils
- [ ] Tests E2E des parcours principaux`,

      backend: `- [ ] API compl√®tement document√©e (OpenAPI/Swagger)
- [ ] Authentification et autorisation impl√©ment√©es
- [ ] Validation des donn√©es d'entr√©e robuste
- [ ] Gestion d'erreurs appropri√©e
- [ ] Logs structur√©s et monitoring`,

      testing: `- [ ] Couverture de code > 85%
- [ ] Tests stables et fiables (pas de flaky tests)
- [ ] Rapports de test d√©taill√©s et exploitables
- [ ] Int√©gration CI/CD fonctionnelle
- [ ] Documentation des sc√©narios de test`,

      bug_fix: `- [ ] Bug reproduit et corrig√©
- [ ] Tests de r√©gression ajout√©s
- [ ] Validation en environnement de staging
- [ ] Aucune r√©gression introduite
- [ ] Post-mortem document√© si critique`,

      refactor: `- [ ] Fonctionnalit√©s existantes pr√©serv√©es
- [ ] Tests existants passent toujours
- [ ] Code plus lisible et maintenable
- [ ] Complexit√© r√©duite (m√©triques am√©lior√©es)
- [ ] Documentation technique mise √† jour`
    };

    return criteria[type] || criteria.feature || `- [ ] Fonctionnalit√© impl√©ment√©e selon les sp√©cifications
- [ ] Tests complets (unitaires, int√©gration, E2E)
- [ ] Code review valid√© par l'√©quipe
- [ ] Documentation technique et utilisateur
- [ ] D√©ploiement valid√© en staging`;
  }

  getTestingRequirements(type) {
    const requirements = {
      frontend: `- Tests unitaires des composants React/Vue
- Tests d'int√©gration des hooks et stores
- Tests E2E des parcours utilisateur
- Tests de r√©gression visuelle
- Tests d'accessibilit√© automatis√©s`,

      backend: `- Tests unitaires des services et utilitaires
- Tests d'int√©gration des APIs
- Tests de base de donn√©es avec fixtures
- Tests de s√©curit√© (authentification, validation)
- Tests de performance et de charge`,

      testing: `- Strat√©gie de test compl√®te d√©finie
- Suites de tests automatis√©es
- Tests de performance int√©gr√©s
- Monitoring de la qualit√© des tests
- Formation √©quipe sur les outils`,

      bug_fix: `- Tests reproduisant le bug avant correction
- Tests de r√©gression sp√©cifiques
- Validation manuelle du fix
- Tests d'impact sur les fonctionnalit√©s connexes`,

      refactor: `- Conservation des tests existants
- Tests additionnels pour le code refactoris√©
- Validation de non-r√©gression compl√®te
- Tests de performance avant/apr√®s`
    };

    return requirements[type] || requirements.feature || `- Tests unitaires avec couverture > 80%
- Tests d'int√©gration des points d'entr√©e
- Tests E2E des fonctionnalit√©s principales
- Tests de r√©gression automatis√©s`;
  }

  async createGitHubIssue(title, description, type, apiKey, labels = 'ai-team,enhancement') {
    console.log(chalk.yellow('üîÑ Cr√©ation de l\'issue GitHub...'));

    try {
      // D√©tection automatique du repository
      const { execSync } = await import('child_process');
      const remoteUrl = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
      const match = remoteUrl.match(/github\.com[/:]([^/]+)\/([^/]+?)(?:\.git)?$/);
      
      if (!match) {
        throw new Error('Repository GitHub non d√©tect√©');
      }

      const [, owner, repo] = match;
      
      // Token GitHub depuis plusieurs sources
      const githubToken = process.env.GITHUB_TOKEN || 
                         process.env.GH_TOKEN || 
                         process.env.GITHUB_ACCESS_TOKEN;
      
      if (!githubToken) {
        console.log(chalk.red('‚ùå Token GitHub manquant'));
        console.log(chalk.cyan('\nüìã SOLUTIONS (au choix):'));
        
        console.log(chalk.white('\nüîß Option 1: Fichier .env (RECOMMAND√â)'));
        console.log(chalk.gray('   1. Ajoutez √† votre fichier .env:'));
        console.log(chalk.blue('      GITHUB_TOKEN=ghp_votre_token_github'));
        console.log(chalk.gray('   2. Cr√©ez le token sur: https://github.com/settings/tokens'));
        console.log(chalk.gray('   3. Permissions requises: repo + workflow'));
        
        console.log(chalk.white('\nüîß Option 2: Variable d\'environnement'));
        console.log(chalk.blue('   export GITHUB_TOKEN="ghp_votre_token_github"'));
        
        console.log(chalk.white('\nüîß Option 3: Utiliser GitHub CLI'));
        console.log(chalk.blue('   gh auth login'));
        console.log(chalk.blue('   export GITHUB_TOKEN=$(gh auth token)'));
        
        console.log(chalk.white('\nüí° Ou cr√©ez l\'issue manuellement:'));
        console.log(chalk.cyan(`   Repository: https://github.com/${owner}/${repo}/issues/new`));
        console.log(chalk.cyan(`   Titre: ${title}`));
        console.log(chalk.cyan(`   Description:\n${description}`));
        console.log(chalk.cyan(`   Labels: ${labels}`));
        return;
      }

      const issueData = {
        title: title,
        body: `${description}

---
**ü§ñ Param√®tres AI Team:**
- Agent: ${type}
- Mod√®le: DeepSeek R1 (DeepSeek-R1-Distill-Llama-70B-free)
- Cr√©√© via: ai-team v2.3.4

**üöÄ Workflow automatique:**
1. L'agent IA va analyser cette demande
2. Du code sera g√©n√©r√© avec DeepSeek R1
3. Une Pull Request sera cr√©√©e automatiquement

*G√©n√©r√© par AI Team Orchestrator v2.3.4 avec DeepSeek R1*`,
        labels: labels.split(',').map(l => l.trim())
      };

      const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues`, {
        method: 'POST',
        headers: {
          'Authorization': `token ${githubToken}`,
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.github.v3+json'
        },
        body: JSON.stringify(issueData)
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Token GitHub invalide ou expir√©');
        } else if (response.status === 403) {
          throw new Error('Permissions insuffisantes pour ce repository');
    } else {
          throw new Error(`GitHub API Error: ${response.status}`);
        }
      }

      const issue = await response.json();
      
      console.log(chalk.green('üéâ Issue cr√©√©e avec succ√®s !'));
      console.log(chalk.cyan(`üìã Issue #${issue.number}: ${issue.title}`));
      console.log(chalk.cyan(`üîó URL: ${issue.html_url}`));
      console.log(chalk.yellow('üöÄ Le workflow AI Team va se d√©clencher avec DeepSeek R1...'));
      
    } catch (error) {
      console.log(chalk.red(`‚ùå Erreur lors de la cr√©ation: ${error.message}`));
      console.log(chalk.white('\nüìã Cr√©ez l\'issue manuellement:'));
      console.log(chalk.cyan(`Titre: ${title}`));
      console.log(chalk.cyan(`Description:\n${description}`));
      console.log(chalk.cyan(`Labels: ${labels}`));
    }
  }

  async handleInit() {
    console.log(chalk.cyan('üöÄ Initialisation du projet AI Team Orchestrator'));
    console.log(chalk.white('Installation des workflows GitHub et scripts DeepSeek R1...\n'));

    try {
      const fs = await import('fs');
      const path = await import('path');
      const { fileURLToPath } = await import('url');
      const { execSync } = await import('child_process');

      // D√©tecter si nous sommes dans un repo git
      try {
        execSync('git rev-parse --git-dir', { stdio: 'ignore' });
        } catch (error) {
        throw new Error('Ce dossier n\'est pas un repository Git. Initialisez d\'abord avec: git init');
      }

      // Trouver le dossier des templates dans le package npm
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      const templatesDir = path.join(__dirname, '..', 'templates');
      
      console.log(chalk.yellow('üìÅ V√©rification des templates...'));
      
      if (!fs.existsSync(templatesDir)) {
        throw new Error('Dossier templates non trouv√©. R√©installez le package: npm install -g ai-team-orchestrator');
      }

      // Cr√©er le dossier .github s'il n'existe pas
      const githubDir = '.github';
      const scriptsDir = path.join(githubDir, 'scripts');
      const workflowsDir = path.join(githubDir, 'workflows');

      console.log(chalk.yellow('üìÇ Cr√©ation de la structure GitHub...'));
      
      if (!fs.existsSync(githubDir)) {
        fs.mkdirSync(githubDir, { recursive: true });
      }
      if (!fs.existsSync(scriptsDir)) {
        fs.mkdirSync(scriptsDir, { recursive: true });
      }
      if (!fs.existsSync(workflowsDir)) {
        fs.mkdirSync(workflowsDir, { recursive: true });
      }

      // Copier les workflows
      const templatesWorkflowsDir = path.join(templatesDir, '.github', 'workflows');
      if (fs.existsSync(templatesWorkflowsDir)) {
        const workflows = fs.readdirSync(templatesWorkflowsDir);
        
        console.log(chalk.yellow('üîß Installation des workflows...'));
        
        for (const workflow of workflows) {
          if (workflow.endsWith('.yml')) {
            const source = path.join(templatesWorkflowsDir, workflow);
            const dest = path.join(workflowsDir, workflow);
            
            fs.copyFileSync(source, dest);
            console.log(chalk.green(`  ‚úÖ ${workflow}`));
          }
        }
      }

      // Copier les scripts
      const templatesScriptsDir = path.join(templatesDir, '.github', 'scripts');
      if (fs.existsSync(templatesScriptsDir)) {
        const scripts = ['ai_team_mcp.py', 'requirements.txt'];
        
        console.log(chalk.yellow('üêç Installation des scripts Python...'));
        
        for (const script of scripts) {
          const source = path.join(templatesScriptsDir, script);
          const dest = path.join(scriptsDir, script);
          
          if (fs.existsSync(source)) {
            fs.copyFileSync(source, dest);
            
            // Donner les permissions d'ex√©cution aux scripts Python
            if (script.endsWith('.py')) {
              try {
                execSync(`chmod +x "${dest}"`, { stdio: 'ignore' });
              } catch (e) {
                // Ignorer les erreurs de permissions sur Windows
              }
            }
            
            console.log(chalk.green(`  ‚úÖ ${script}`));
          } else {
            console.log(chalk.yellow(`  ‚ö†Ô∏è ${script} non trouv√© dans les templates`));
          }
        }
      }

      console.log(chalk.green('\nüéâ Installation termin√©e avec succ√®s !'));
      console.log(chalk.cyan('\nüìã Prochaines √©tapes:'));
      console.log(chalk.white('1. Configurez vos secrets GitHub:'));
      console.log(chalk.gray('   ‚Ä¢ Repository Settings ‚Üí Secrets and variables ‚Üí Actions'));
      console.log(chalk.gray('   ‚Ä¢ Cr√©ez: TOGETHER_AI_API_KEY (votre cl√© Together.ai)'));
      console.log(chalk.gray('   ‚Ä¢ Cr√©ez: GITHUB_TOKEN (token GitHub avec permissions)'));
      console.log();
      console.log(chalk.white('2. Testez avec une issue:'));
      console.log(chalk.blue('   ai-team issue "Landing page moderne" --type frontend'));
      console.log();
      console.log(chalk.white('3. Le workflow se d√©clenchera automatiquement !'));
      console.log(chalk.gray('   ‚Ä¢ Analyse avec DeepSeek R1'));
      console.log(chalk.gray('   ‚Ä¢ G√©n√©ration de code'));
      console.log(chalk.gray('   ‚Ä¢ Cr√©ation de Pull Request'));
      console.log();
      console.log(chalk.cyan('üß† Propuls√© par DeepSeek R1 - L\'IA la plus avanc√©e !'));

    } catch (error) {
      throw new Error(`Erreur lors de l'initialisation: ${error.message}`);
    }
  }

  async handleCheck() {
    console.log(chalk.cyan('üîç AI Team Orchestrator - Diagnostic complet'));
    console.log(chalk.white('V√©rification de tous les pr√©requis pour DeepSeek R1...\n'));

    let allGood = true;
    const issues = [];

    try {
      const fs = await import('fs');
      const { execSync } = await import('child_process');

      // 1. V√©rification Git
      console.log(chalk.yellow('üìÅ 1. V√©rification du repository Git...'));
      try {
        const remoteUrl = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
        const match = remoteUrl.match(/github\.com[/:]([^/]+)\/([^/]+?)(?:\.git)?$/);
        
        if (match) {
          const [, owner, repo] = match;
          console.log(chalk.green(`  ‚úÖ Repository GitHub d√©tect√©: ${owner}/${repo}`));
          } else {
          console.log(chalk.red(`  ‚ùå URL remote non GitHub: ${remoteUrl}`));
          issues.push('Repository non GitHub d√©tect√©');
          allGood = false;
        }
      } catch (error) {
        console.log(chalk.red('  ‚ùå Pas de repository Git ou remote non configur√©'));
        issues.push('Repository Git non configur√©');
        allGood = false;
      }

      // 2. V√©rification des workflows
      console.log(chalk.yellow('\nüîß 2. V√©rification des workflows GitHub...'));
      const workflowsDir = '.github/workflows';
      
      if (fs.existsSync(workflowsDir)) {
        const workflows = ['ai-team-mcp.yml'];
        let workflowsPresent = 0;
        
        workflows.forEach(workflow => {
          const workflowPath = `${workflowsDir}/${workflow}`;
          if (fs.existsSync(workflowPath)) {
            console.log(chalk.green(`  ‚úÖ ${workflow}`));
            workflowsPresent++;
          } else {
            console.log(chalk.red(`  ‚ùå ${workflow} manquant`));
            issues.push(`Workflow ${workflow} manquant`);
            allGood = false;
          }
        });
        
        if (workflowsPresent === 0) {
          console.log(chalk.red('  üí° Ex√©cutez: ai-team init'));
        }
      } else {
        console.log(chalk.red('  ‚ùå Dossier .github/workflows/ non trouv√©'));
        console.log(chalk.yellow('  üí° Ex√©cutez: ai-team init'));
        issues.push('Workflows non install√©s');
        allGood = false;
      }

      // 3. V√©rification des scripts
      console.log(chalk.yellow('\nüêç 3. V√©rification des scripts Python...'));
      const scriptsDir = '.github/scripts';
      
      if (fs.existsSync(scriptsDir)) {
        const scripts = ['ai_team_mcp.py', 'requirements.txt'];
        
        scripts.forEach(script => {
          const scriptPath = `${scriptsDir}/${script}`;
          if (fs.existsSync(scriptPath)) {
            console.log(chalk.green(`  ‚úÖ ${script}`));
          } else {
            console.log(chalk.red(`  ‚ùå ${script} manquant`));
            issues.push(`Script ${script} manquant`);
            allGood = false;
          }
        });
      } else {
        console.log(chalk.red('  ‚ùå Dossier .github/scripts/ non trouv√©'));
        issues.push('Scripts non install√©s');
        allGood = false;
      }

      // 4. V√©rification Together.ai API Key
      console.log(chalk.yellow('\nüîë 4. V√©rification Together.ai API Key...'));
      const apiManager = new APIKeyManager();
      
      let configSource = '';
      if (apiManager.isAPIKeyConfigured()) {
        const apiKey = apiManager.getAPIKey();
        console.log(chalk.green(`  ‚úÖ Cl√© API configur√©e (${apiKey.length} caract√®res)`));
        
        // D√©tecter la source de configuration
        if (fs.existsSync('.env')) {
          const envContent = fs.readFileSync('.env', 'utf8');
          if (envContent.includes('TOGETHER_AI_API_KEY=')) {
            configSource = 'üìÅ Fichier .env local (RECOMMAND√â)';
            console.log(chalk.cyan(`  üéØ Source: ${configSource}`));
          }
        } else {
          configSource = 'üîß Configuration npm ou variables d\'environnement';
          console.log(chalk.yellow(`  üìã Source: ${configSource}`));
          console.log(chalk.white('  üí° Conseil: Utilisez "ai-team setup-api" pour cr√©er un .env local'));
        }
        
        // Test de la cl√© API
        try {
          console.log(chalk.yellow('  üß™ Test de la cl√© API...'));
          const testValid = await this.testTogetherAI(apiKey);
          if (testValid) {
            console.log(chalk.green('  ‚úÖ Cl√© API valide et fonctionnelle'));
    } else {
            console.log(chalk.red('  ‚ùå Cl√© API invalide ou non fonctionnelle'));
            issues.push('Cl√© Together.ai invalide');
            allGood = false;
          }
        } catch (error) {
          console.log(chalk.red(`  ‚ùå Erreur test API: ${error.message}`));
          issues.push('Erreur lors du test Together.ai');
          allGood = false;
        }
      } else {
        console.log(chalk.red('  ‚ùå Cl√© API Together.ai non configur√©e'));
        console.log(chalk.yellow('  üí° Ex√©cutez: ai-team setup-api'));
        issues.push('Cl√© Together.ai non configur√©e');
        allGood = false;
      }

      // 5. V√©rification GitHub Token et permissions
      console.log(chalk.yellow('\nüîê 5. V√©rification GitHub Token...'));
      const githubToken = process.env.GITHUB_TOKEN || process.env.GH_TOKEN;
      
      if (githubToken) {
        console.log(chalk.green(`  ‚úÖ GitHub Token d√©tect√© (${githubToken.length} caract√®res)`));
        
        try {
          const permissions = await this.checkGitHubTokenPermissions(githubToken);
          console.log(chalk.green('  ‚úÖ Token valide'));
          
          // V√©rifier les permissions sp√©cifiques
          const requiredPermissions = [
            'contents:write',
            'pull-requests:write', 
            'issues:write',
            'actions:read'
          ];
          
          console.log(chalk.yellow('  üìã Permissions d√©tect√©es:'));
          if (permissions && permissions.length > 0) {
            permissions.forEach(perm => {
              console.log(chalk.cyan(`    ‚Ä¢ ${perm}`));
            });
      } else {
            console.log(chalk.yellow('    ‚Ä¢ Impossible de d√©tecter les permissions exactes'));
            console.log(chalk.yellow('    ‚Ä¢ Le token semble valide mais v√©rifiez manuellement'));
      }
      
    } catch (error) {
          console.log(chalk.red(`  ‚ùå Token GitHub invalide: ${error.message}`));
          issues.push('Token GitHub invalide');
          allGood = false;
        }
      } else {
        console.log(chalk.red('  ‚ùå Token GitHub non configur√©'));
        console.log(chalk.yellow('  üí° Configurez GITHUB_TOKEN dans vos variables d\'environnement'));
        console.log(chalk.gray('    export GITHUB_TOKEN="ghp_xxxxxxxxxxxx"'));
        issues.push('Token GitHub non configur√©');
        allGood = false;
      }

      // 6. V√©rification des secrets GitHub Actions
      console.log(chalk.yellow('\nüîí 6. V√©rification recommandations secrets...'));
      console.log(chalk.cyan('  üìã Secrets requis pour GitHub Actions:'));
      console.log(chalk.white('    ‚Ä¢ TOGETHER_AI_API_KEY (obligatoire)'));
      console.log(chalk.white('    ‚Ä¢ GITHUB_TOKEN (automatique ou manuel)'));
      console.log(chalk.gray('  üí° Configurez dans: Repository Settings ‚Üí Secrets ‚Üí Actions'));

      // R√©sum√© final
      console.log(chalk.yellow('\nüìä R√âSUM√â DU DIAGNOSTIC'));
      console.log('='.repeat(50));
      
      if (allGood) {
        console.log(chalk.green('üéâ TOUT EST PR√äT !'));
        console.log(chalk.green('‚úÖ Tous les pr√©requis sont satisfaits'));
        console.log(chalk.cyan('\nüöÄ Prochaines √©tapes:'));
        console.log(chalk.white('1. Cr√©ez une issue: ai-team issue "votre demande" --type frontend'));
        console.log(chalk.white('2. Le workflow se d√©clenchera automatiquement'));
        console.log(chalk.white('3. DeepSeek R1 analysera et g√©n√©rera le code'));
        console.log(chalk.white('4. Une Pull Request sera cr√©√©e'));
      } else {
        console.log(chalk.red('‚ùå PROBL√àMES D√âTECT√âS'));
        console.log(chalk.red(`${issues.length} probl√®me(s) √† r√©soudre:\n`));
        issues.forEach((issue, index) => {
          console.log(chalk.red(`${index + 1}. ${issue}`));
        });
        
        console.log(chalk.yellow('\nüîß ACTIONS RECOMMAND√âES:'));
        if (issues.some(i => i.includes('Workflows'))) {
          console.log(chalk.white('‚Ä¢ Ex√©cutez: ai-team init'));
        }
        if (issues.some(i => i.includes('Together.ai'))) {
          console.log(chalk.white('‚Ä¢ Ex√©cutez: ai-team setup-api'));
        }
        if (issues.some(i => i.includes('GitHub'))) {
          console.log(chalk.white('‚Ä¢ Configurez GITHUB_TOKEN: export GITHUB_TOKEN="ghp_xxx"'));
          console.log(chalk.white('‚Ä¢ Permissions requises: contents:write, pull-requests:write, issues:write'));
        }
      }
      
      console.log(chalk.cyan('\nüß† AI Team Orchestrator - Propuls√© par DeepSeek R1'));
      
    } catch (error) {
      throw new Error(`Erreur lors du diagnostic: ${error.message}`);
    }
  }

  async testTogetherAI(apiKey) {
    try {
      const response = await fetch('https://api.together.xyz/v1/models', {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  async checkGitHubTokenPermissions(token) {
    try {
      const response = await fetch('https://api.github.com/user', {
        headers: {
          'Authorization': `token ${token}`,
          'Accept': 'application/vnd.github.v3+json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      // V√©rifier les scopes dans les headers
      const scopes = response.headers.get('X-OAuth-Scopes');
      return scopes ? scopes.split(', ').map(s => s.trim()) : [];

    } catch (error) {
      throw new Error(`Token invalide: ${error.message}`);
    }
  }

  async handleSyncSecrets() {
    console.log(chalk.cyan('üîÑ Synchronisation des secrets GitHub √† partir du fichier .env local'));
    
    const apiManager = new APIKeyManager();
    
    if (apiManager.isAPIKeyConfigured()) {
      const apiKey = apiManager.getAPIKey();
      console.log(chalk.green(`‚úÖ Cl√© API configur√©e (${apiKey.length} caract√®res)`));
      
      // D√©tecter la source de configuration
      if (fs.existsSync('.env')) {
        const envContent = fs.readFileSync('.env', 'utf8');
        if (envContent.includes('TOGETHER_AI_API_KEY=')) {
          console.log(chalk.cyan('üìÅ Fichier .env local (RECOMMAND√â)'));
        }
      } else {
        console.log(chalk.yellow('üîß Configuration npm ou variables d\'environnement'));
        console.log(chalk.white('üí° Conseil: Utilisez "ai-team setup-api" pour cr√©er un .env local'));
      }
      
      // Test de la cl√© API
      try {
        console.log(chalk.yellow('üß™ Test de la cl√© API...'));
        const testValid = await this.testTogetherAI(apiKey);
        if (testValid) {
          console.log(chalk.green('‚úÖ Cl√© API valide et fonctionnelle'));
    } else {
          console.log(chalk.red('‚ùå Cl√© API invalide ou non fonctionnelle'));
          return;
        }
      } catch (error) {
        console.log(chalk.red(`‚ùå Erreur test API: ${error.message}`));
        return;
      }
      } else {
      console.log(chalk.red('‚ùå Cl√© API Together.ai non configur√©e'));
      console.log(chalk.yellow('üí° Ex√©cutez: ai-team setup-api'));
      return;
    }

    console.log(chalk.cyan('\nüéØ Synchronisation des secrets GitHub termin√©e avec succ√®s !'));
  }

  run() {
    // Affichage par d√©faut si aucune commande
    if (!process.argv.slice(2).length) {
      console.log(chalk.blue.bold('ü§ñ AI Team Orchestrator v2.0'));
      console.log(chalk.cyan('üß† Propuls√© par DeepSeek R1 - Plus intelligent, plus rapide !'));
      console.log(chalk.gray('Cr√©ation automatique d\'issues GitHub en quelques secondes\n'));
      
      console.log(chalk.yellow('üöÄ COMMANDES ULTRA-RAPIDES:'));
      console.log(chalk.white('  ai-team check'), chalk.gray('      - Diagnostic complet'));
      console.log(chalk.white('  ai-team init'), chalk.gray('       - Initialisation du projet'));
      console.log(chalk.white('  ai-team issue "titre"'), chalk.gray('- Cr√©ation automatique d\'issue'));
      console.log(chalk.white('  ai-team create "desc"'), chalk.gray('- Mode cr√©ation rapide'));
      console.log(chalk.white('  ai-team setup-api'), chalk.gray('   - Configuration en 30s'));
      console.log();
      
      console.log(chalk.green('üéØ Exemples instantan√©s:'));
      console.log(chalk.blue('  ai-team setup-api'), chalk.gray('   - Configuration .env (recommand√©)'));
      console.log(chalk.blue('  ai-team init'), chalk.gray('          - Installation workflows'));
      console.log(chalk.blue('  ai-team issue "Landing page moderne" --type frontend'));
      console.log(chalk.blue('  ai-team issue "API REST avec auth" --type backend'));
      console.log();
      
      console.log(chalk.cyan('üí° NOUVEAU: Configuration ultra-simple avec fichier .env !'));
      console.log(chalk.gray('Plus de secrets GitHub complexes, tout se fait en local ! ‚ö°'));
    }
    
    this.program.parse();
  }
}

// Point d'entr√©e
const cli = new AITeamCLI();
cli.run(); 