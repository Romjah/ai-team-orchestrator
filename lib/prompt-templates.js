/**
 * AI Team Orchestrator - Templates de Prompts Performants
 * Syst√®me avanc√© de templates pour structurer les modifications de code avec DeepSeek R1
 */

export class PromptTemplateManager {
  constructor() {
    this.templates = this.initializeTemplates();
    this.contextAnalyzers = this.initializeContextAnalyzers();
  }

  /**
   * G√©n√®re un prompt optimis√© selon le type de t√¢che et le contexte
   */
  generatePrompt(title, type, additionalContext = {}) {
    const template = this.templates[type] || this.templates.feature;
    const analyzedContext = this.analyzeContext(title, type, additionalContext);
    
    return this.compileTemplate(template, {
      title,
      type,
      ...analyzedContext,
      ...additionalContext
    });
  }

  /**
   * Analyse le contexte pour enrichir le prompt
   */
  analyzeContext(title, type, additionalContext) {
    const context = {
      complexity: this.detectComplexity(title),
      technologies: this.detectTechnologies(title),
      patterns: this.detectPatterns(title, type),
      scope: this.detectScope(title),
      priority: this.detectPriority(title, type)
    };

    return { ...context, ...additionalContext };
  }

  /**
   * D√©tecte la complexit√© de la t√¢che
   */
  detectComplexity(title) {
    const complexityIndicators = {
      high: ['architecture', 'microservice', 'system', 'integration', 'migration', 'performance', 'scalable', 'enterprise'],
      medium: ['dashboard', 'api', 'authentication', 'database', 'workflow', 'automation'],
      low: ['button', 'form', 'page', 'style', 'text', 'image', 'simple']
    };

    const titleLower = title.toLowerCase();
    
    for (const [level, indicators] of Object.entries(complexityIndicators)) {
      if (indicators.some(indicator => titleLower.includes(indicator))) {
        return level;
      }
    }
    
    return 'medium';
  }

  /**
   * D√©tecte les technologies impliqu√©es
   */
  detectTechnologies(title) {
    const techMap = {
      frontend: ['react', 'vue', 'angular', 'next', 'nuxt', 'svelte', 'typescript', 'tailwind', 'css', 'html', 'javascript'],
      backend: ['node', 'express', 'fastify', 'python', 'django', 'flask', 'java', 'spring', 'php', 'laravel', 'go', 'rust'],
      database: ['mongodb', 'postgresql', 'mysql', 'redis', 'elasticsearch', 'prisma', 'sequelize'],
      cloud: ['aws', 'azure', 'gcp', 'docker', 'kubernetes', 'serverless', 'lambda'],
      testing: ['jest', 'cypress', 'playwright', 'vitest', 'mocha', 'junit']
    };

    const titleLower = title.toLowerCase();
    const detectedTechs = [];

    for (const [category, techs] of Object.entries(techMap)) {
      const foundTechs = techs.filter(tech => titleLower.includes(tech));
      if (foundTechs.length > 0) {
        detectedTechs.push({ category, techs: foundTechs });
      }
    }

    return detectedTechs;
  }

  /**
   * D√©tecte les patterns architecturaux
   */
  detectPatterns(title, type) {
    const patterns = {
      'mvc': ['model', 'view', 'controller', 'mvc'],
      'microservices': ['microservice', 'service', 'api', 'distributed'],
      'spa': ['single page', 'spa', 'router', 'navigation'],
      'crud': ['create', 'read', 'update', 'delete', 'crud', 'form'],
      'rest': ['rest', 'restful', 'endpoint', 'api'],
      'graphql': ['graphql', 'query', 'mutation', 'subscription'],
      'auth': ['authentication', 'authorization', 'login', 'jwt', 'oauth'],
      'real-time': ['websocket', 'socket.io', 'real-time', 'live', 'stream']
    };

    const titleLower = title.toLowerCase();
    const detectedPatterns = [];

    for (const [pattern, keywords] of Object.entries(patterns)) {
      if (keywords.some(keyword => titleLower.includes(keyword))) {
        detectedPatterns.push(pattern);
      }
    }

    return detectedPatterns;
  }

  /**
   * D√©tecte la port√©e du projet
   */
  detectScope(title) {
    const titleLower = title.toLowerCase();
    
    if (['landing', 'page', 'component', 'button', 'form'].some(word => titleLower.includes(word))) {
      return 'component';
    } else if (['dashboard', 'admin', 'panel', 'interface'].some(word => titleLower.includes(word))) {
      return 'interface';
    } else if (['api', 'service', 'backend', 'server'].some(word => titleLower.includes(word))) {
      return 'service';
    } else if (['app', 'application', 'system', 'platform'].some(word => titleLower.includes(word))) {
      return 'application';
    }
    
    return 'feature';
  }

  /**
   * D√©tecte la priorit√©
   */
  detectPriority(title, type) {
    const titleLower = title.toLowerCase();
    const urgentKeywords = ['urgent', 'critique', 'bug', 'fix', 'emergency', 'asap'];
    const highKeywords = ['important', 'priority', 'performance', 'security', 'optimization'];
    
    if (type === 'bug_fix' || urgentKeywords.some(word => titleLower.includes(word))) {
      return 'urgent';
    } else if (highKeywords.some(word => titleLower.includes(word))) {
      return 'high';
    }
    
    return 'normal';
  }

  /**
   * Compile le template avec les variables de contexte
   */
  compileTemplate(template, context) {
    let compiled = template.base;

    // Remplacer les variables
    compiled = compiled.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      return context[key] || match;
    });

    // Ajouter les sections sp√©cifiques
    if (template.sections) {
      for (const [condition, section] of Object.entries(template.sections)) {
        if (this.evaluateCondition(condition, context)) {
          compiled += '\n\n' + section;
        }
      }
    }

    // Ajouter les contraintes sp√©cifiques au type
    if (template.constraints) {
      compiled += '\n\n## Contraintes Sp√©cifiques\n' + template.constraints;
    }

    return compiled;
  }

  /**
   * √âvalue une condition pour l'inclusion de sections
   */
  evaluateCondition(condition, context) {
    // Conditions simples pour ce PoC, peut √™tre √©tendu
    if (condition.startsWith('complexity:')) {
      return context.complexity === condition.split(':')[1];
    }
    if (condition.startsWith('scope:')) {
      return context.scope === condition.split(':')[1];
    }
    if (condition.startsWith('priority:')) {
      return context.priority === condition.split(':')[1];
    }
    if (condition.startsWith('pattern:')) {
      return context.patterns && context.patterns.includes(condition.split(':')[1]);
    }
    
    return false;
  }

  /**
   * Initialise tous les templates de prompts
   */
  initializeTemplates() {
    return {
      frontend: this.getFrontendTemplate(),
      backend: this.getBackendTemplate(),
      testing: this.getTestingTemplate(),
      bug_fix: this.getBugFixTemplate(),
      refactor: this.getRefactorTemplate(),
      feature: this.getFeatureTemplate(),
      architecture: this.getArchitectureTemplate(),
      performance: this.getPerformanceTemplate()
    };
  }

  /**
   * Template optimis√© pour les t√¢ches frontend
   */
  getFrontendTemplate() {
    return {
      base: `En tant qu'expert d√©veloppeur Frontend avec DeepSeek R1, analysez cette demande et g√©n√©rez une sp√©cification technique d√©taill√©e.

## üéØ DEMANDE
**Titre:** {{title}}
**Type:** Frontend Development
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üìã ANALYSE TECHNIQUE REQUISE

### Architecture Frontend
- Structure des composants et hi√©rarchie
- Gestion d'√©tat (local/global)
- Routing et navigation
- Architecture des dossiers

### Interface Utilisateur
- Design system et composants r√©utilisables
- Responsive design et breakpoints
- Accessibilit√© (WCAG 2.1)
- Performance UI (lazy loading, optimisations)

### Technologies et Stack
- Framework/Library recommand√©
- Outils de build et bundling
- Styling (CSS/Sass/Styled-components/Tailwind)
- Testing framework

### Int√©grations
- APIs et endpoints
- Gestion des donn√©es (cache, sync)
- Authentification
- Services externes

## üé® SP√âCIFICATIONS VISUELLES
- Wireframes ou mockups
- Charte graphique
- Interactions et animations
- √âtats des composants (loading, error, success)

## ‚ö° CRIT√àRES DE PERFORMANCE
- Time to First Byte (TTFB) < 100ms
- First Contentful Paint (FCP) < 1.5s
- Largest Contentful Paint (LCP) < 2.5s
- Cumulative Layout Shift (CLS) < 0.1

## üîß IMPL√âMENTATION
G√©n√©rez le code suivant:
1. Structure des fichiers et dossiers
2. Composants principaux avec TypeScript
3. Styles et th√®mes
4. Tests unitaires et d'int√©gration
5. Configuration build/dev

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Interface responsive (mobile-first)
- [ ] Accessibilit√© WCAG 2.1 AA
- [ ] Performance Web Vitals optimale
- [ ] Tests coverage > 80%
- [ ] Code TypeScript strict
- [ ] Documentation technique`,

      sections: {
        'complexity:high': `### Architecture Avanc√©e
- Micro-frontends ou Module Federation
- State management complexe (Redux/Zustand)
- Server-Side Rendering (SSR/SSG)
- Progressive Web App (PWA)`,

        'pattern:spa': `### Single Page Application
- Routing client-side avec React Router ou √©quivalent
- Code splitting par routes
- Lazy loading des composants
- Gestion de l'historique navigateur`,

        'pattern:real-time': `### Fonctionnalit√©s Temps R√©el
- WebSocket ou Server-Sent Events
- Synchronisation des donn√©es en temps r√©el
- Gestion des connexions/d√©connexions
- Fallback pour les connexions instables`
      },

      constraints: `- Utiliser les derni√®res versions stables des frameworks
- Impl√©menter les Web Vitals d√®s le d√©veloppement
- Code splitting automatique pour optimiser le bundle
- Support des derni√®res versions de navigateurs (ES2020+)
- S√©curit√©: CSP headers, XSS protection, HTTPS only`
    };
  }

  /**
   * Template optimis√© pour les t√¢ches backend
   */
  getBackendTemplate() {
    return {
      base: `En tant qu'expert d√©veloppeur Backend avec DeepSeek R1, analysez cette demande et g√©n√©rez une architecture technique robuste.

## üéØ DEMANDE
**Titre:** {{title}}
**Type:** Backend Development  
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üèóÔ∏è ARCHITECTURE TECHNIQUE

### Structure du Service
- Architecture hexagonale ou clean architecture
- S√©paration des couches (Controller, Service, Repository)
- Injection de d√©pendances
- Design patterns appliqu√©s

### API Design
- RESTful ou GraphQL endpoints
- Versioning strategy (v1, v2...)
- Documentation OpenAPI/Swagger
- Rate limiting et throttling

### Base de Donn√©es
- Mod√©lisation des donn√©es
- Relations et contraintes
- Migrations et seeds
- Optimisations et indexes

### S√©curit√©
- Authentification (JWT, OAuth2, SAML)
- Autorisation (RBAC, ABAC)
- Validation des donn√©es
- Protection OWASP Top 10

## üíæ PERSISTANCE ET DONN√âES
- Sch√©ma de base de donn√©es
- ORM/ODM configuration
- Cache strategy (Redis, Memcached)
- Backup et recovery

## üöÄ PERFORMANCE ET SCALABILIT√â
- Load balancing
- Horizontal scaling
- Database optimization
- Monitoring et observabilit√©

## üîß IMPL√âMENTATION
G√©n√©rez le code suivant:
1. Structure projet avec modules/packages
2. Mod√®les de donn√©es et migrations
3. Controllers et routes
4. Services m√©tier
5. Tests unitaires et d'int√©gration
6. Configuration Docker/docker-compose

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] API REST/GraphQL compl√®tement document√©e
- [ ] Authentification et autorisation s√©curis√©es
- [ ] Tests coverage > 85%
- [ ] Performance: < 100ms response time
- [ ] Monitoring et logs structur√©s
- [ ] Code quality (ESLint, SonarQube)`,

      sections: {
        'complexity:high': `### Microservices Architecture
- Service discovery et service mesh
- Event-driven architecture
- CQRS et Event Sourcing
- Distributed tracing et observabilit√©`,

        'pattern:microservices': `### D√©composition en Microservices
- Bounded contexts et domain modeling
- Inter-service communication (HTTP, gRPC, events)
- Data consistency patterns (Saga, 2PC)
- Circuit breaker et retry policies`,

        'pattern:auth': `### Syst√®me d'Authentification
- Multi-factor authentication (MFA)
- Social login providers
- Session management
- Password policies et hashing`
      },

      constraints: `- Utiliser des frameworks √©prouv√©s (Express, Fastify, NestJS)
- Impl√©menter les 12-factor app principles
- S√©curit√© by design avec validation stricte
- Monitoring avec Prometheus/Grafana ou √©quivalent
- Containerisation Docker avec multi-stage builds`
    };
  }

  /**
   * Template optimis√© pour les tests
   */
  getTestingTemplate() {
    return {
      base: `En tant qu'expert QA Engineer avec DeepSeek R1, concevez une strat√©gie de test compl√®te et automatis√©e.

## üéØ DEMANDE
**Titre:** {{title}}
**Type:** Testing & Quality Assurance
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üß™ STRAT√âGIE DE TEST

### Pyramide de Test
- Tests unitaires (70%) - Logique m√©tier isol√©e
- Tests d'int√©gration (20%) - APIs et services
- Tests end-to-end (10%) - Parcours utilisateur

### Types de Tests
- **Fonctionnels:** Happy path, edge cases, error handling
- **Non-fonctionnels:** Performance, s√©curit√©, accessibilit√©
- **R√©gression:** Suites automatis√©es
- **Smoke tests:** Tests critiques post-d√©ploiement

## üîß OUTILS ET FRAMEWORKS
- Framework de test (Jest, Vitest, Mocha)
- E2E testing (Cypress, Playwright, Puppeteer)
- Performance testing (K6, Artillery)
- Visual regression (Percy, Chromatic)

## üìä COUVERTURE ET M√âTRIQUES
- Code coverage > 85%
- Branch coverage > 80%
- Mutation testing score > 75%
- Test execution time < 5min

## üîß IMPL√âMENTATION
G√©n√©rez les tests suivants:
1. Tests unitaires avec mocks et stubs
2. Tests d'int√©gration API
3. Tests E2E pour parcours critiques
4. Tests de performance et charge
5. Tests de s√©curit√© (OWASP ZAP)
6. Configuration CI/CD

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Suite de tests compl√®te et maintenable
- [ ] Rapports de tests d√©taill√©s
- [ ] Int√©gration CI/CD
- [ ] Tests parall√©lis√©s pour vitesse
- [ ] Documentation des sc√©narios de test`,

      constraints: `- Tests rapides et fiables (< 10 secondes unitaires)
- Isolation compl√®te entre tests
- Data fixtures et cleanup automatique
- Rapports JUnit/Allure pour CI/CD
- Tests cross-browser pour E2E`
    };
  }

  /**
   * Template optimis√© pour les corrections de bugs
   */
  getBugFixTemplate() {
    return {
      base: `En tant qu'expert debugger avec DeepSeek R1, analysez ce bug et proposez une solution robuste.

## üêõ ANALYSE DU BUG
**Titre:** {{title}}
**Priority:** {{priority}}
**Complexit√©:** {{complexity}}

## üîç DIAGNOSTIC REQUIS

### Investigation
- Reproduction du bug (√©tapes pr√©cises)
- Analyse des logs et stack traces
- Identification de la root cause
- Impact et p√©rim√®tre affect√©

### Analyse Technique
- Code review des sections concern√©es
- Dependencies et versions impliqu√©es
- Environment et configuration
- Performance impact

## üõ†Ô∏è PLAN DE R√âSOLUTION

### Solution Propos√©e
- Fix minimal et s√ªr
- R√©gression tests
- Validation du fix
- Plan de rollback si n√©cessaire

### Pr√©vention
- Tests additionnels
- Monitoring am√©lior√©
- Documentation mise √† jour
- Code review checklist

## üîß IMPL√âMENTATION
G√©n√©rez la correction suivante:
1. Fix du code avec commentaires explicatifs
2. Tests de r√©gression sp√©cifiques
3. Scripts de validation
4. Documentation technique
5. Monitoring/alerting additionnel

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Bug reproduit et corrig√©
- [ ] Tests de r√©gression ajout√©s
- [ ] Impact valid√© en staging
- [ ] Performance non d√©grad√©e
- [ ] Documentation mise √† jour`,

      constraints: `- Fix minimal pour r√©duire les risques
- Tests automatis√©s pour pr√©venir la r√©gression
- Monitoring pour d√©tecter les r√©cidives
- Rollback plan document√©
- Post-mortem si bug critique`
    };
  }

  /**
   * Template par d√©faut pour les features
   */
  getFeatureTemplate() {
    return {
      base: `En tant qu'expert d√©veloppeur avec DeepSeek R1, concevez et impl√©mentez cette nouvelle fonctionnalit√©.

## üéØ DEMANDE
**Titre:** {{title}}
**Type:** Feature Development
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üìã SP√âCIFICATIONS FONCTIONNELLES

### Objectifs
- Valeur business de la fonctionnalit√©
- Probl√®me r√©solu pour l'utilisateur
- M√©triques de succ√®s

### Fonctionnalit√©s D√©taill√©es
- User stories et cas d'usage
- Workflows et parcours utilisateur
- Business rules et validations
- Edge cases et gestion d'erreurs

## üèóÔ∏è CONCEPTION TECHNIQUE

### Architecture
- Design pattern appropri√©
- Int√©gration avec l'existant
- APIs et interfaces
- Data flow et state management

### Technologies
- Stack technique recommand√©e
- Librairies et d√©pendances
- Configuration et setup
- Build et d√©ploiement

## üîß IMPL√âMENTATION
G√©n√©rez l'impl√©mentation suivante:
1. Architecture et structure
2. Code principal avec tests
3. Documentation technique
4. Guide d'utilisation
5. Scripts de d√©ploiement

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Fonctionnalit√© compl√®te selon specs
- [ ] Tests unitaires et d'int√©gration
- [ ] Performance optimis√©e
- [ ] S√©curit√© valid√©e
- [ ] Documentation utilisateur`,

      constraints: `- Code maintenable et √©volutif
- Performance compatible avec l'existant
- S√©curit√© by design
- Backward compatibility pr√©serv√©e
- Monitoring et observabilit√© int√©gr√©s`
    };
  }

  /**
   * Template pour refactoring
   */
  getRefactorTemplate() {
    return {
      base: `En tant qu'expert en refactoring avec DeepSeek R1, am√©liorez ce code tout en pr√©servant les fonctionnalit√©s.

## üéØ DEMANDE DE REFACTORING
**Titre:** {{title}}
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üîç ANALYSE DU CODE EXISTANT

### Code Smells Identifi√©s
- Duplications et violations DRY
- Complexit√© cyclomatique √©lev√©e
- Couplage fort entre modules
- Responsabilit√©s mal d√©finies

### Objectifs du Refactoring
- Am√©lioration de la lisibilit√©
- R√©duction de la complexit√©
- Meilleure testabilit√©
- Performance optimis√©e

## üõ†Ô∏è STRAT√âGIE DE REFACTORING

### Patterns √† Appliquer
- Extract Method/Class
- Strategy Pattern
- Dependency Injection
- SOLID principles

### Plan d'Ex√©cution
- Refactoring incr√©mental
- Tests de r√©gression continus
- Validation des performances
- Code review √©tapes par √©tapes

## üîß IMPL√âMENTATION
G√©n√©rez le refactoring suivant:
1. Analyse d√©taill√©e du code existant
2. Code refactoris√© par √©tapes
3. Tests de r√©gression complets
4. Comparaison performance avant/apr√®s
5. Documentation des changements

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Fonctionnalit√©s pr√©serv√©es (100%)
- [ ] Code coverage maintenu/am√©lior√©
- [ ] Performance √©gale ou meilleure
- [ ] Complexit√© r√©duite (cyclomatic < 10)
- [ ] Code review valid√©`,

      constraints: `- Aucune r√©gression fonctionnelle
- Refactoring par petites √©tapes valid√©es
- Tests automatis√©s obligatoires
- Performance monitoring continu
- Documentation des changements architecturaux`
    };
  }

  /**
   * Template pour architecture
   */
  getArchitectureTemplate() {
    return {
      base: `En tant qu'architecte logiciel expert avec DeepSeek R1, concevez une architecture robuste et scalable.

## üéØ DEMANDE ARCHITECTURALE
**Titre:** {{title}}
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üèõÔ∏è CONCEPTION ARCHITECTURALE

### Vision Architecture
- Patterns architecturaux (MVC, MVP, MVVM, Hexagonal)
- Principes SOLID et Clean Architecture
- Domain-Driven Design si applicable
- Event-Driven ou Request-Response

### Scalabilit√© et Performance
- Horizontal vs Vertical scaling
- Load balancing strategy
- Caching layers (Redis, CDN)
- Database sharding/partitioning

### S√©curit√© Architecture
- Security by design
- Zero-trust principles
- Data encryption at rest/transit
- Access control et audit trails

## üîß IMPL√âMENTATION
G√©n√©rez l'architecture suivante:
1. Diagrammes d'architecture (C4 model)
2. Structure de projet et modules
3. Interfaces et contrats
4. Configuration et infrastructure
5. Documentation architecturale
6. Migration plan si n√©cessaire

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Architecture document√©e et valid√©e
- [ ] Patterns bien d√©finis et appliqu√©s
- [ ] Scalabilit√© prouv√©e par design
- [ ] S√©curit√© int√©gr√©e d√®s la conception
- [ ] Performance benchmarks d√©finis`,

      constraints: `- Standards industry respect√©s
- Documentation architecture vivante
- Monitoring et observabilit√© int√©gr√©s
- Infrastructure as Code
- Disaster recovery plan`
    };
  }

  /**
   * Template pour performance
   */
  getPerformanceTemplate() {
    return {
      base: `En tant qu'expert performance avec DeepSeek R1, optimisez et am√©liorez les performances syst√®me.

## üéØ OPTIMISATION PERFORMANCE
**Titre:** {{title}}
**Complexit√©:** {{complexity}}
**Port√©e:** {{scope}}

## üìä ANALYSE PERFORMANCE

### M√©triques Actuelles
- Response time et throughput
- Memory usage et CPU utilization
- Network latency et bandwidth
- Database query performance

### Bottlenecks Identifi√©s
- Code inefficace ou algorithms O(n¬≤)
- N+1 queries ou missing indexes
- Memory leaks ou excessive GC
- Network round-trips inutiles

### Objectifs Performance
- Response time target: < 100ms
- Throughput target: X req/sec
- Memory usage: < Y MB
- 99th percentile: < Z ms

## üöÄ STRAT√âGIES D'OPTIMISATION

### Frontend Optimizations
- Code splitting et lazy loading
- Image optimization et WebP
- Browser caching strategies
- Service Workers et PWA

### Backend Optimizations
- Database query optimization
- Connection pooling
- Caching layers (Redis, Memcached)
- Asynchronous processing

### Infrastructure Optimizations
- CDN configuration
- Load balancer tuning
- Auto-scaling policies
- Container optimization

## üîß IMPL√âMENTATION
G√©n√©rez les optimisations suivantes:
1. Profiling et benchmarking tools
2. Code optimis√© avec mesures
3. Caching implementation
4. Monitoring et alerting
5. Load testing scripts
6. Performance regression tests

## ‚úÖ CRIT√àRES D'ACCEPTATION
- [ ] Targets performance atteints
- [ ] Monitoring continu en place
- [ ] Load tests valid√©s
- [ ] Regression tests automatis√©s
- [ ] Documentation des optimisations`,

      constraints: `- Optimizations mesur√©es et prouv√©es
- Performance budgets respect√©s
- Monitoring real-time en production
- Load testing automatis√© en CI/CD
- Performance regression prevention`
    };
  }

  /**
   * Initialise les analyseurs de contexte
   */
  initializeContextAnalyzers() {
    return {
      projectSize: this.analyzeProjectSize.bind(this),
      techStack: this.analyzeTechStack.bind(this),
      teamSize: this.analyzeTeamSize.bind(this),
      timeline: this.analyzeTimeline.bind(this)
    };
  }

  analyzeProjectSize(context) {
    // Analyse bas√©e sur les mots-cl√©s pour d√©terminer la taille du projet
    return context.complexity === 'high' ? 'large' : 'medium';
  }

  analyzeTechStack(context) {
    // Retourne les technologies d√©tect√©es
    return context.technologies || [];
  }

  analyzeTeamSize(context) {
    // Estimation de la taille d'√©quipe bas√©e sur la complexit√©
    return context.complexity === 'high' ? 'large' : 'small';
  }

  analyzeTimeline(context) {
    // Estimation du timeline bas√©e sur la priorit√© et complexit√©
    if (context.priority === 'urgent') return 'immediate';
    if (context.complexity === 'high') return 'long';
    return 'medium';
  }
}

export default PromptTemplateManager; 